<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.6.0/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

<script src="js/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js"></script>

<style>
#content-container {
    width: auto;  
    float: none;
    display: block;
    margin-left: auto;
    margin-right: auto;
}

#editor-container {
    height: 450px;
}

#content-preview, 
#content-settings, 
#content-help {   
    display: none;
}

</style>

<script>  
    
    $(document).ready(function(){
        // import counter class
        <%- include('counter.js'); %>
        // import showGroup class
        <%- include('showGroup.js'); %>

        var options = {
            debug: 'info',
            modules: {
                toolbar: '#toolbar-container',
                counter: {
                    container: '#counter',
                    unit: 'word'
                },
                // set history: delay set to 1000, undo would undo all changes that occured within the last 1000 milliseconds. 
                history: {
                    delay: 1000,
                    maxStack: 200,
                    userOnly: true
                },
                showgroup: {
                    container: '#showgroup',
                    // set word group rules
                    dicGroup: {
                        "Montreal" : "1",
                        "Toronto" : "1",
                        "Brossard" : "1",
                        "Ottawa" : "1",
                        "Sherbrooke" : "1",
                        "And" : "1"
                    }
                    
                }
            },
            placeholder: 'Compose an epic...',
            theme: 'snow'
        };
        //editor is a global variable for recall it in other functions       
        editor = new Quill('#editor-container', options);
            
        // Enable all tooptips
        // $('[data-toggle="tooltip"]').tooltip();
        
        //add click event for UndoByTime and Redo
        var click_undoByTime = document.getElementById("undoByTime_click");
        click_undoByTime.onclick = function() {
            console.log("Successful Undo By Timing...");
            editor.history.undo() ;

            var history = editor.history;
            console.log("History:\n")
            console.log(history)
        
            
            console.log("Editor history: " + editor.history);
            
        }

        var click_redo = document.getElementById("redo_click");
        click_redo.onclick = function() {
            console.log("Successful Redo...");
            editor.history.redo();
        }

        //add undo and redo method of header menu
        var click_undoByTime2 = document.getElementById("undoByTime_click2");
        click_undoByTime2.onclick = function() {
            console.log("Successful Undo By Timing...");
            editor.history.undo();
        }
        var click_redo2 = document.getElementById("redo_click2");
        click_redo2.onclick = function() {
            console.log("Successful Redo...");
            editor.history.redo();
        }

    //add download file function
    var click_download = document.getElementById("download_click");
    click_download.onclick = function(){
        var frm = document.getElementById("form_download");  
        frm.action = "/download";  
        frm.method = "post";                 
        frm.submit(); 
    }
    var click_download2 = document.getElementById("download_click2");
    click_download2.onclick = function(){
        var frm = document.getElementById("form_download2");  
        frm.action = "/download";  
        frm.method = "post";                 
        frm.submit(); 
    }

    //save file function
    var click_save = document.getElementById("save_click");
    click_save.onclick = function(){
        //get content from the editor
        var getText = editor.getText();
        getText = getText.trim();
        var fsText = JSON.parse(JSON.stringify(getText));
        console.log("%%%%%%save_click to get fsText%%%%%% " + fsText);
        //submit form using POST method
        document.getElementById("download_input").value = fsText;
            
        var frm = document.getElementById("form_save");  
        frm.action = "/save";  
        frm.method = "post";                 
        frm.submit(); 
    }
    var click_save2 = document.getElementById("save_click2");
    click_save2.onclick = function(){
        //get content from the editor
        var getText = editor.getText();
        getText = getText.trim();
        var fsText = JSON.parse(JSON.stringify(getText));
        console.log("%%%%%%save_click to get fsText%%%%%% " + fsText);
        //submit form using POST method
        document.getElementById("download_input2").value = fsText;
            
        var frm = document.getElementById("form_save2");  
        frm.action = "/save2";  
        frm.method = "post";                 
        frm.submit(); 
    }




    }); //document

    
   

    // choose file to open
    function readFile(input) {
        let file = input.files[0];
        let reader = new FileReader();

        reader.readAsText(file);

        reader.onload = function() {
            
            //set Contents in Quill Editor
            var data = reader.result;
            //transfer to string and replace all \,
            //var newdata = data.toString().replace(/\,/g, " ");
            var newdata = data.toString().replace(/-/g, "-\n")
            console.log("###reading file content: ", newdata);
            editor.setContents([
                {insert : newdata}
            ])
        };

        reader.onerror = function() {
            console.log(reader.error);
        };
        
    }

    // switch button for backgroud color
    var btn = document.getElementById('btn');
    var body = document.querySelector('body');
    var isLight = true;
    btn.onclick = function() {
        if (isLight == true) {
            document.body.classList.add('night');
            // body.style.backgroundColor = '#000';
            isLight = false;
        } else {
            document.body.classList.remove('night');
            // body.style.backgroundColor = '#fff';
            isLight = true;
        }
    }

    // Speak Text function (Not support IE)
    function speakText(text, volume=1, pitch=0.95, rate=1, lang='en-US'){
        const announcement = new SpeechSynthesisUtterance();
        announcement.pitch = pitch;
        announcement.rate = rate;
        announcement.volume = volume;
        announcement.lang = lang;
        announcement.text = text;
        //attention the below speechSynthesis is not capital first letter
        window.speechSynthesis.speak(announcement);
    }
    // click read button to speak text of the editor
    var click_read = document.getElementById('speakText-btn');
    click_read.onclick = function() {
        //get content from the editor
        var getText = editor.getText();
        getText = getText.trim();
        var fsText = JSON.parse(JSON.stringify(getText));
        //recall speak function
        speakText(fsText);
        console.log('##### Speak Text Success!!!#####')
    }

    // 3 switch buttons 
    // switch button for Preview MarkDown mode
    var btn_preview = document.getElementById('preview-btn');
    var body = document.querySelector('body');
    var isPreview = true;
    var isSetting = true;  
    var isHelp = true;
    btn_preview.onclick = function() {
        //set same height for div
        $("#content-preview").height($("#content-container").height());
    
        if (isPreview == true) {
            document.body.classList.add('preview');
            document.body.classList.remove('settings');
            document.body.classList.remove('help');
            isPreview = false;
            isSetting = true;  
            isHelp = true;
            // create preview markdown content form the Editor
            document.getElementById("content-preview").innerHTML = marked(editor.getText());
        } else {
            document.body.classList.remove('preview');
            isPreview = true;
        }
        
    }

    // switch button for click setting button
    function click_setting(){
        //set same height for div
        $("#content-settings").height($("#content-container").height());
        var body = document.querySelector('body');           
        if (isSetting == true) {
            document.body.classList.add('settings');
            document.body.classList.remove('preview');
            document.body.classList.remove('help');
            isSetting = false;
            isPreview = true;
            isHelp = true;
        } else {
            document.body.classList.remove('settings');
            isSetting = true;
        }        
    }

    // switch button for click help button
    function click_help(){
        //set same height for div
        $("#content-help").height($("#content-container").height());
        var body = document.querySelector('body');           
        if (isHelp == true) {
            document.body.classList.add('help');
            document.body.classList.remove('preview');
            document.body.classList.remove('settings');
            isHelp = false;
            isSetting = true;
            isPreview = true;
        } else {
            document.body.classList.remove('help');
            isHelp = true;
        }        
    }

    //function to preview Markdonwn from Editor
    $("#editor-container").on("keyup blur", function(){
            if(isPreview == false ){
            document.getElementById("content-preview").innerHTML = marked(editor.getText());
        }

    })

    //set marked and highlighter js
    marked.setOptions({
        renderer: new marked.Renderer(),
        highlight: function(code) {
            return hljs.highlightAuto(code).value;
        },
        pedantic: false,
        gfm: true,
        tables: true,
        breaks: false,
        sanitize: false,
        smartLists: true,
        smartypants: false,
        xhtml: false
        }
    );

    // set synchronize scroll
    
    // colorful switch button for wonderful backgroud color
    $(document).ready(function(){
        var btn_color = document.getElementById('color-btn');
        var body = document.querySelector('body');
        var isColor = true;
        var isStop = false;
        btn_color.onclick = function() {
            if ( isColor ) {
                //document.body.classList.add('color');
                isColor = false;
                var colors = new Array([62,35,255],[60,255,60],[255,35,98],[45,175,230],[255,0,255],[255,128,0]);
                var step = 0;
                //color table indices for: 
                // current color left
                // next color left
                // current color right
                // next color right
                var colorIndices = [0,1,2,3];
                //transition speed
                var gradientSpeed = 0.002;
                function updateGradient(){
                    if ( isStop ) {
                        clearInterval(timer1);
                        isStop = false;
                        return;
                    }
                    
                    var c0_0 = colors[colorIndices[0]];
                    var c0_1 = colors[colorIndices[1]];
                    var c1_0 = colors[colorIndices[2]];
                    var c1_1 = colors[colorIndices[3]];

                    var istep = 1 - step;
                    var r1 = Math.round(istep * c0_0[0] + step * c0_1[0]);
                    var g1 = Math.round(istep * c0_0[1] + step * c0_1[1]);
                    var b1 = Math.round(istep * c0_0[2] + step * c0_1[2]);
                    var color1 = "rgb("+r1+","+g1+","+b1+")";

                    var r2 = Math.round(istep * c1_0[0] + step * c1_1[0]);
                    var g2 = Math.round(istep * c1_0[1] + step * c1_1[1]);
                    var b2 = Math.round(istep * c1_0[2] + step * c1_1[2]);
                    var color2 = "rgb("+r2+","+g2+","+b2+")";

                    $('#content').css({
                        background: "-webkit-gradient(linear, left top, right top, from("+color1+"), to("+color2+"))"}).css({
                        background: "-moz-linear-gradient(left, "+color1+" 0%, "+color2+" 100%)"});
                    
                    step += gradientSpeed;
                    if ( step >= 1 )
                    {
                        step %= 1;
                        colorIndices[0] = colorIndices[1];
                        colorIndices[2] = colorIndices[3];
                        
                        //pick two new target color indices
                        //do not pick the same as the current one
                        colorIndices[1] = ( colorIndices[1] + Math.floor( 1 + Math.random() * (colors.length - 1))) % colors.length;
                        colorIndices[3] = ( colorIndices[3] + Math.floor( 1 + Math.random() * (colors.length - 1))) % colors.length;
                        
                    }
                }
                if(isStop == false){
                    var timer1 = setInterval(updateGradient,20);
                }
                
                
                
            } else {
                //document.body.classList.remove('color');
                isColor = true;
                if (isStop == false){
                    $('#content').css('background', '');
                    isStop = true;
                }
                
            }

        }

    });


    

    
    
    

</script> 
